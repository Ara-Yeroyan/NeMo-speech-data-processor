documentation: |
  Armenian MCV
  ######

  This config can be used to prepare MCV corpus for ASR training

  This config performs the following data processing.

  1. Create initial manifest by MCV's tsv files (if required, merges [Train, Dev, Other] into a single Train.
  2. Read text files line by line.
  3. Removes some symbols (note the datapoints themselves) present in the dataset which are not armenian characters
  4. Drops everything with non-armenian characters.
  5. Normalize text lines using Regex.
  6. Drops the datapoints corresponding to corrupted files from the dataset
  7. Builds tokenizer based on the texts (can also incorporate any other corpus given by glob pattern, e.g. "data/*.txt")
  8. Converts dataset to tarr format to support faster ASR training

  **Required arguments**.

  * **workspace_dir**: specify the workspace folder where all audio files will be stored.
  * **target_language**: specify the language for ExtraSymbolFiltering (see `scripts/dataset_processing/mcv/enlarge_data.py`)
  * **ignore_symbols**: specify the Symbols to remove from the texts
  * **manifests_dir**: directory to store all the manifests (each processor generates new manifest)
  * **final_manifest**: path to **final_manifest**

  Note that you can customize any part of this config either directly or from command-line.
  Here are some common customizations to consider:

  **Output format**.

  Output manifest **final_manifest** contain the following fields:
  * **"audio_filepath":  (str)**: path to the audio (resampled 16k)
  * **"duration":  (float)**: duration of the audio in seconds
  * **""text": ":  (str)**: the transcript/text spoken in the audio

processors_to_run: "0:"
raw_data_dir: ???
workspace_dir: ???
target_language: "armenian"
manifests_dir: ${raw_data_dir}/manifests
final_manifest: ${workspace_dir}/final_manifest.json
ignore_symbols: "’!?;(֊i)vxclсм(>1▁hi3тпиd→{m&[4вро6лs7])←590ued»pb__v՚–'<h«v֊o28―n\\\\}—»«"


processors:
  - _target_: sdp.processors.CreateInitialManifestMCV  # conda install -c conda-forge -y sox libvorbis
    language_id: hy-AM
    # comment lines below if want to use default splits
    corrupted: ???
    enlarge_train: true
    # comment END
    target_nchannels: 1
    data_split: validated
    already_extracted: true
    target_samplerate: 16000
    raw_data_dir: ${raw_data_dir}
    resampled_audio_dir: ${raw_data_dir}/16k
    extract_archive_dir: ${raw_data_dir}/cv-corpus-16.0-2023-12-06
    output_manifest_file: ${manifests_dir}/manifest_mcv_0.json

  - _target_: sdp.processors.RemoveExtraSymbols
    ignore_symbols: ${ignore_symbols}
    target_language: ${target_language}
    input_manifest_file: ${manifests_dir}/manifest_mcv_0.json
    output_manifest_file: ${manifests_dir}/manifest_mcv_0_filtered.json


  - _target_: sdp.processors.DropNonAlphabet
    alphabet: "աբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքևօֆԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖ՜֊՞՛՝»«։<>´`՚.,? '"
    test_cases:
      - { input: { text: "test тест 测试" }, output: null }
      - { input: { text: "Բարև" }, output: { text: "Բարև" } }
      - {input: {text: "test тест Գրիմ եղբայրներ, անտառի տնակը, Ռուսերենից թարգմանեց, Ամալիյա Ուկասյանը."}, output: null}
    input_manifest_file: ${manifests_dir}/manifest_mcv_0_filtered.json
    output_manifest_file: ${manifests_dir}/manifest_dropalphabet_1.json

  - _target_: sdp.processors.SubRegex
    regex_params_list:
      - {"pattern": "!", "repl": "." }
      - {"pattern": "…", "repl": "." }
      - { "pattern": "’", "repl": "'" }
      - { "pattern": '[\":\(\)“”;]', "repl": '' }
      - { "pattern": "[-/]", "repl": " " }
      - {"pattern": "«", "repl": "<<"}
      - { "pattern": "ó", "repl": "o" }
      - {"pattern": "»", "repl": ">>"}
      - { "pattern": "Ó", "repl": "O" }
      - { "pattern": "Եվ", "repl": "և" }
      - { "pattern": "ԵՎ", "repl": "և" }
      - { "pattern": "եՎ", "repl": "և" }
      - { "pattern": '—', "repl": "-" }
      - { "pattern": '–', "repl": "-" }
      - { "pattern": '―', "repl": "-" }
      - { "pattern": '\.\.\.', "repl": "…" }
      - { "pattern": "\\s+", "repl": " " }
    test_cases:
      - { input: { text: "Բարև!" }, output: { text: "Բարև." } }
    input_manifest_file: ${manifests_dir}/manifest_dropalphabet_1.json
    output_manifest_file: ${manifests_dir}/manifest_subregex_2.json

  - _target_: sdp.processors.DropIfRegexMatch
    regex_patterns: [
      # corrupted audios
      "common_voice_hy-AM_26600902.mp3",
      "common_voice_hy-AM_26600920.mp3",
      "common_voice_hy-AM_27555073.mp3",
      "common_voice_hy-AM_27555103.mp3",
      "common_voice_hy-AM_27555122.mp3",
      "common_voice_hy-AM_36858460.mp3",
      "common_voice_hy-AM_36858462.mp3",
      "common_voice_hy-AM_36858463.mp3",
      "common_voice_hy-AM_36858464.mp3",
      "common_voice_hy-AM_39393509.mp3",
      "common_voice_hy-AM_39393523.mp3",
      "common_voice_hy-AM_39516269.mp3",
      "common_voice_hy-AM_39534930.mp3",
      "common_voice_hy-AM_39534945.mp3",
      "common_voice_hy-AM_39534946.mp3",
      "common_voice_hy-AM_39534953.mp3",
      "common_voice_hy-AM_39534958.mp3",
      "common_voice_hy-AM_39538083.mp3",
      "common_voice_hy-AM_39538084.mp3",
      "common_voice_hy-AM_39538085.mp3",
#      "[А-Яа-я]",
#      "[A-Za-z]",
      "\\+",
      "=",
      "¬",
      "&"
    ]
    text_key: audio_filepath
    input_manifest_file: ${manifests_dir}/manifest_subregex_2.json
    output_manifest_file: ${manifests_dir}/manifest_dropregex_3.json

  - _target_: sdp.processors.CreateTokenizer
    ignore_symbols: ${ignore_symbols}
    target_language: ${target_language}
    nemo_executable: "~/anaconda3/envs/nemo/python.exe"
    nemo_repo_path: ???
    data_folder: ${raw_data_dir}/cv-corpus-16.0-2023-12-06/hy-AM
    extra_corpus: ${raw_data_dir}}/grqaser/*/normalized_texts/*.txt
    vocab_size: 128
    lower_case: true
    spe_type: "unigram"
    input_manifest_file: ${manifests_dir}/manifest_dropregex_3.json

  - _target_: sdp.processors.ConvertDatasetToTar
    target_dir: ${raw_data_dir}/tarred
    nemo_repo_path: ???
    nemo_executable: "~/anaconda3/envs/nemo/python.exe"
    input_manifest_file: ${manifests_dir}/manifest_dropregex_3.json
    output_manifest_file: ${final_manifest}
